@using Swashbuckle.AspNetCore.Swagger;
@using Newtonsoft.Json;

<!DOCTYPE html>
<html>
<head>
    <title>Swagger API</title>
    <style type='text/css'>

        table, table td, table th {
            border: 1px solid #000000;
            border-collapse: collapse;
        }

        table {
            table-layout: fixed;
            word-break: break-all;
        }

        tr {
            height: 20px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div style='width:1000px; margin: 0 auto'>
        <h1 align="center">@Model.Info.Title</h1>
        <h1 align="center">API文件 @Model.Info.Version</h1>
        <span>@Model.Info.Description</span>

        @foreach (var item in Model.Paths)
        {
            
            if (item.Value.Operations != null)
            {
                foreach (var operation in item.Value.Operations)
                {
                    <h3>@operation.Value.Summary</h3>
                    <table border='1' cellspacing='0' cellpadding='0' width='100%' style="table-layout: fixed; word-break: break-all;border: 1px solid #000000;border-collapse: collapse;">
                        <tr style="border: 1px solid #000000;border-collapse: collapse;">
                            <td style="border: 1px solid #000000;border-collapse: collapse; padding-left: 10px; background-color: rgb(64, 161, 232);" >Method</td>
                            <td colspan='5' style="padding-left: 10px;">@operation.Key</td>
                        </tr>

                        <tr style="border: 1px solid #000000;border-collapse: collapse;">
                            <td style="border: 1px solid #000000;border-collapse: collapse; padding-left: 10px; background-color: rgb(64, 161, 232);">URL</td>
                            <td colspan='5' style="padding-left: 10px;">@item.Key</td>
                        </tr>
                        
						
                        @if (operation.Value.Parameters != null && operation.Value.Parameters.Count > 0)
                        {
							var paramRowSize = operation.Value.Parameters.Count + 1;
							<tr style="background-color: rgb(12, 116, 191);">
								<td align='center' style="border: 1px solid #000000;border-collapse: collapse;" colspan='6'>Request Body</td>
							</tr>
                            <tr style="background-color: rgb(64, 161, 232);">
								<td style="padding-left: 10px; border: 1px solid #000000;border-collapse: collapse;" rowspan="@paramRowSize">Parameters</td>
                                <td align='center' style="border: 1px solid #000000;border-collapse: collapse;">Name</td>
                                <td align='center' style="border: 1px solid #000000;border-collapse: collapse;">Type</td>
                                <td align='center' style="border: 1px solid #000000;border-collapse: collapse;">Required</td>
                                <td align='center' style="border: 1px solid #000000;border-collapse: collapse;" colspan='2'>Description</td>
                            </tr>
                            @foreach (var param in operation.Value.Parameters)
                            {
                                <tr align='center' style="border: 1px solid #000000;border-collapse: collapse;">
                                    <td style="border: 1px solid #000000;border-collapse: collapse;">@param.Name</td>
                                    <td style="border: 1px solid #000000;border-collapse: collapse;">@param.In</td>
                                    <td style="border: 1px solid #000000;border-collapse: collapse;">@param.Required</td>
                                    <td style="border: 1px solid #000000;border-collapse: collapse;" colspan='2'>@param.Description</td>
                                </tr>
                            }
                        }
						
                        @if (operation.Value.Responses != null && operation.Value.Responses.Count > 0)
                        {
							var reponseRowSize = operation.Value.Responses.Count + 1;
							<tr style="background-color: rgb(12, 116, 191);">
							<td align='center' style="border: 1px solid #000000;border-collapse: collapse;" colspan='6'>Response Body</td>
							</tr>
							<tr style="background-color: rgb(64, 161, 232);">
								<td style="padding-left: 10px; border: 1px solid #000000;border-collapse: collapse;" rowspan="@reponseRowSize">Status</td>
								<td align='center' style="border: 1px solid #000000;border-collapse: collapse;">Code</td>
								<td align='center' style="border: 1px solid #000000;border-collapse: collapse;" colspan='4'>Description</td>
							</tr>
							
							var schemaType = "";
							string modelSchema = string.Empty;
                            @foreach (var response in operation.Value.Responses)
                            {
								
                                <tr align='center' style="border: 1px solid #000000;border-collapse: collapse;">
                                    <td style="border: 1px solid #000000;border-collapse: collapse;">@response.Key</td>
                                    <td style="border: 1px solid #000000;border-collapse: collapse;" colspan='4'>@response.Value.Description</td>
									
                                </tr>
								var contentType = response.Value.Content;


								if (contentType != null && contentType.Count > 0)
								{
									var firstContent = contentType.Values.ElementAt(0);

									schemaType = firstContent.Schema?.Type;
									
									
								}
                            }
							
							var settings = new JsonSerializerSettings
								{
									NullValueHandling = NullValueHandling.Ignore,
									DefaultValueHandling = DefaultValueHandling.Ignore
								};
								
							
							
							foreach (var schema in Model.Components.Schemas)
							{
								if (schema.Key == schemaType)
								{
									
									var propertyDescriptions = schema.Value.Properties
										.Select(p => $"\"{p.Key}\": <{p.Value?.Description ?? ""}>");

									var jsonBuilder = new System.Text.StringBuilder();
									jsonBuilder.AppendLine("{");

									foreach (var propertyDescription in propertyDescriptions)
									{
										jsonBuilder.AppendLine($"  {propertyDescription},");
									}

									if (propertyDescriptions.Any())
									{
										jsonBuilder.Length -= 3;
										jsonBuilder.AppendLine();
									}

									jsonBuilder.AppendLine("}");

									modelSchema = jsonBuilder.ToString();
									
								}
							}			
							
							<tr>
								<td style="border: 1px solid #000000;border-collapse: collapse;" colspan='6'><pre>@modelSchema</pre></td>
							</tr>
							
                        }
						</table>
                    
                    <br>
                }

            }

        }
    </div>
</body>
</html>
